name: CI and Release Build

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          # Linux Builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x86_64
            features: ""
            label: "standard"

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x86_64
            features: "zip"
            label: "full"

          # macOS Builds
          - os: macos-latest
            target: x86_64-apple-darwin
            arch: x86_64
            features: ""
            label: "standard"

          - os: macos-latest
            target: x86_64-apple-darwin
            arch: x86_64
            features: "zip"
            label: "full"

          # Windows Builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x86_64
            features: ""
            label: "standard"

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x86_64
            features: "zip"
            label: "full"

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Check for Linux and macOS
      - name: Check on Linux and macOS
        if: runner.os != 'Windows'
        run: |
          if [[ -z "${{ matrix.features }}" ]]; then
            cargo check
          else
            cargo check --features "${{ matrix.features }}"
          fi
        shell: bash

      # Check for Windows
      - name: Check on Windows
        if: runner.os == 'Windows'
        run: |
          if (-not "${{ matrix.features }}") {
            cargo check
          } else {
            cargo check --features ${{ matrix.features }}
          }
        shell: powershell

      # Build for Linux and macOS
      - name: Build on Linux and macOS
        if: runner.os != 'Windows'
        run: |
          if [[ -z "${{ matrix.features }}" ]]; then
            cargo build --release
          else
            cargo build --release --features "${{ matrix.features }}"
          fi
        shell: bash

      # Build for Windows
      - name: Build on Windows
        if: runner.os == 'Windows'
        run: |
          if (-not "${{ matrix.features }}") {
            cargo build --release
          } else {
            cargo build --release --features ${{ matrix.features }}
          }
        shell: powershell

      # Zipping for Linux and macOS
      - name: Zip the build on Linux and macOS
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          zip -j artifacts/discord-gdpr-counter-${{ matrix.target }}-${{ matrix.label }}-${{ matrix.os }}.zip target/release/discord-gdpr-counter
        shell: bash

      # Zipping for Windows
      - name: Zip the build on Windows
        if: runner.os == 'Windows'
        run: |
          mkdir -p artifacts
          Compress-Archive -Path target/release/discord-gdpr-counter.exe -DestinationPath artifacts/discord-gdpr-counter-${{ matrix.target }}-${{ matrix.label }}-${{ matrix.os }}.zip
        shell: powershell

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: "discord-gdpr-counter-${{ matrix.target }}-${{ matrix.label }}-${{ matrix.os }}"
          path: "artifacts/discord-gdpr-counter-${{ matrix.target }}-${{ matrix.label }}-${{ matrix.os }}.zip"
