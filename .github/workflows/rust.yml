name: Rust

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "**.md"
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        features:
          - ""
          - "zip"

    name: Build and Test on ${{ matrix.os }} with features '${{ matrix.features }}'
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install zip (if needed)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y zip

      - name: Check
        run: cargo check --features "${{ matrix.features }}"
      - name: Test
        run: cargo test --features "${{ matrix.features }}"
      - name: Lint
        run: cargo clippy --all-targets --features "${{ matrix.features }}" -- -D warnings
      - name: Format
        run: cargo fmt --all -- --check
      - name: Build
        run: cargo build --release --features "${{ matrix.features }}"

      - name: Set Target Triple
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "TARGET_TRIPLE=x86_64-unknown-linux-gnu" >> $GITHUB_ENV
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "TARGET_TRIPLE=x86_64-apple-darwin" >> $GITHUB_ENV
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "TARGET_TRIPLE=x86_64-pc-windows-msvc" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Set Artifact Name
        run: |
          if [ "${{ matrix.features }}" != "" ]; then
            echo "ARTIFACT_NAME=your_project_name-${{ env.TARGET_TRIPLE }}.${{ matrix.features }}.zip" >> $GITHUB_ENV
          else
            echo "ARTIFACT_NAME=your_project_name-${{ env.TARGET_TRIPLE }}.zip" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Create Zip Archive
        run: |
          mkdir -p artifacts
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            Compress-Archive -Path "target\\release\\your_executable_name.exe" -DestinationPath "artifacts\\${{ env.ARTIFACT_NAME }}"
          else
            zip -j "artifacts/${{ env.ARTIFACT_NAME }}" "target/release/your_executable_name"
          fi
        shell: bash

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifacts/${{ env.ARTIFACT_NAME }}
